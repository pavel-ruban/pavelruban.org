<?php
/**
 * @file
 * Geopolis site main module.
 */

define('LE_SITE_MODULE_PATH', drupal_get_path('module', 'le_site'));
define('LE_SITE_THEME_PATH', drupal_get_path('theme', 'le'));
define('LE_ADMIN_THEME_PATH', drupal_get_path('theme', 'le_admin'));
define('LE_SITE_EXPOSED_DATE_FORMAT', 'd/m/Y');
define(
  '__GEOPOLIS_SITE_MASK_URL_INPUT',
  '!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:.-/?&%+_=#(),@[]{};^~$'
);
define(
  '__GEOPOLIS_SITE_MASK_URL_OUTPUT',
  '!op8#0qr:stxyEFYZ.-/?7zaR)ST9UV_WXbcdeuvwfghijkl&456mnG+HIJKL%123=MNOPQA(BCD,@[]{};^~$'
);
define('LE_SITE_ADMIN_THEME_PATH', drupal_get_path('theme', 'le_admin'));
define('LE_SITE_NODE_VIEW_COUNTER_RESET_INTEVAL', 2592000);
define('GEOPOLIS_SITE_FEEDS_IMPORT_INTEVAL', 84600);
define('GEOPOLIS_NEWS_GENERATE_INTEVAL', 3600);
define('GEOPOLIS_SITE_STOP_WORDS', " l' , d' , un , une , de , la , le , les , des , et , du ");

require_once 'le_site.video.inc';
require_once 'le_site.nodequeue.inc';
require_once 'le_site.theming.inc';
require_once 'le_site.entity_reference.inc';
require_once 'le_site.form.inc';
require_once 'le_site.asset.inc';
require_once 'le_site.seo.inc';

/**
 * Implements hook_menu().
 */
function le_site_menu() {
  $items = array();
  $items['node/%node/unpublish'] = array(
    'title' => 'Unpublish',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('le_site_node_unpublish_confirm', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'le_site.admin.inc',
  );

  $items['node/%node/publish'] = array(
    'title' => 'Publish',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('le_site_node_publish_confirm', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'le_site.admin.inc',
  );

  $items['admin/taxonomy/term/%/delete'] = array(
    'title' => 'Delete Term',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('le_site_additions_taxonomy_term_confirm_delete', 3),
    'access arguments' => array('administer taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'file path' => drupal_get_path('module', 'taxonomy'),
  );

  $items['gn.xml'] = array(
    'page callback' => 'le_site_render_google_news',
    'access arguments' => array('access content'),
  );

  $items['le/ajax/illustration-preview/%'] = array(
    'page callback' => 'le_site_get_asset_image_preview',
    'page arguments' => array(3),
    'access arguments' => array('access assets overview'),
  );

  return $items;
}

/**
 * Implements hook_filter_info().
 */
function geopolis_site_filter_info() {
  $filters['replace_external_link'] = array(
    'title' => t('Replace external link'),
    'description' => t('Replace externla link from <a> to <span> & encode href (SEO)'),
    'process callback' => 'geopolis_site_replace_external_link_filter',
  );
  $filters['embed_video_filter'] = array(
    'title' => t('Convert video tags to markup'),
    'description' => t('This filter will convert [{video}] tags into markup'),
    'process callback' => 'geopolis_site_embed_video_process',
  );
  $filters['embed_video_microformat'] = array(
    'title' => t('Convert embed video into microformat video'),
    'description' => t('Convert embed video into microformat video'),
    'process callback' => 'geopolis_site_generate_video_microformat',
  );

  return $filters;
}

/**
 * Implements hook_menu().
 */
function le_site_theme() {
  $path = drupal_get_path('module', 'le_site') . '/theme';

  return array(
    'search_form_on_search_page' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'search-form-on-search-page',
      'file' => 'theme.inc',
    ),
    'admin_dashboard_link' => array(
      'path' => $path,
      'template' => 'admin-dashboard-link',
      'file' => 'theme.inc',
    ),
    'ajouter_reference_dialog_buttons' => array(
      'path' => $path,
      'template' => 'ajouter-reference-dialog-buttons',
      'file' => 'theme.inc',
    ),
    'video_microformat' => array(
      'variables' => array('video' => NULL, 'emcode' => NULL),
      'path' => $path,
      'template' => 'video-microformat',
      'file' => 'theme.inc',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function le_site_menu_alter(&$items) {
  $items['admin/structure/nodequeue']['title'] = 'La Une';

  // Redefine nodequeue autocomplete callback.
  $items['nodequeue/autocomplete']['page callback'] = 'le_site_nodequeue_autocomplete';
  $items['references-dialog/redirect/%/%']['page callback'] = 'le_site_references_dialog_redirect_page';
}

 /**
  * Implements hook_admin_paths().
  */
function le_site_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/publish' => TRUE,
      'node/*/unpublish' => TRUE,
      'geopolis/ajax/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Access callback for content lock release.
 */
function geopolis_site_content_lock_access($nid) {
  if (user_access('administer checked out documents')) {
    return TRUE;
  }
  if (user_access('administer editable checked out documents')) {
    $node = node_load($nid);
    return node_access('update', $node);
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function geopolis_site_permission() {
  return array(
    'administer editable checked out documents' => array(
      'title' => t('Administer Checked Out Editable Documents'),
      'description' => t('Enables administrators to view and break locks made by other users if they have access to update the node.'),
      'restrict access' => TRUE,
    ),
    'manage janrain and disqus disabling' => array(
      'title' => t('Manage janrain and disqus disabling'),
      'description' => t('Ability to disabling janrain and disqus render.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_filed_formatter_info().
 */
function geopolis_site_field_formatter_info() {
  return array(
    'geopolis_site_label_list' => array(
      'label' => t('List of labels'),
      'description' => t('Display the list of labels of the referenced entities.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'link' => FALSE,
      ),
    ),
    'geopolis_site_image_url' => array(
      'label' => t('Image URL'),
      'description' => t('Display the URL of an image.'),
      'field types' => array('image', 'imagefield_crop'),
      'settings' => array('image_style' => ''),
    ),
    'geopolis_site_clear_markup' => array(
      'label' => t('Clear markup and assets'),
      'description' => t('Clears text from markup and assets.'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
    'geopolis_site_asset_map' => array(
      'label' => t('Show google maps'),
      'description' => t('Show google maps in the right size.'),
      'field types' => array('text_long'),
      'settings' => array('map_width' => '', 'map_height' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function geopolis_site_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'geopolis_site_label_list':
      $element['link'] = array(
        '#title' => t('Link label to the referenced entity'),
        '#type' => 'checkbox',
        '#default_value' => $settings['link'],
      );
      break;

    case 'geopolis_site_image_url':
      $image_styles = image_style_options(FALSE);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );
      break;

    case 'geopolis_site_asset_map':
      $element['map_width'] = array(
        '#title' => t('Width'),
        '#type' => 'textfield',
        '#default_value' => (!empty($settings['map_width'])) ? $settings['map_width'] : 425,
      );

      $element['map_height'] = array(
        '#title' => t('Height'),
        '#type' => 'textfield',
        '#default_value' => (!empty($settings['map_height'])) ? $settings['map_height'] : 350 ,
      );
      break;

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function geopolis_site_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  switch ($display['type']) {
    case 'geopolis_site_label_list':
      $summary[] = $settings['link'] ? t('Link to the referenced entity') : t('No link');
      break;

    case 'geopolis_site_image_url':
      $image_styles = image_style_options(FALSE);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }
      break;

    case 'geopolis_site_asset_map':
      if (!empty($settings['map_width']) && !empty($settings['map_height'])) {
        $summary[] = t('Set size of map') . '<br />' . $settings['map_width'] . 'x' . $settings['map_height'];
      }
      else {
        $summary[] = t('Set size of map');
      }
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_node_presave().
 */
function geopolis_site_node_presave($node) {
  if ($node->type == 'article') {
    // Generate metatags.
    $chapo = field_get_items('node', $node, 'field_article_catchline');
    if (!empty($chapo)) {
      $node->metatags['description']['value'] = truncate_utf8(
        preg_replace("/&#?[a-z0-9]+;/i", ' ', check_plain($chapo[0]['value'])),
        155,
        TRUE
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function le_site_node_insert($node) {
  // Add node into nodequeue.
  /**if ($node->is_new && $node->status === 1 && $node->type == 'article') {
    $queue = nodequeue_load_queue_by_name('article_home');
    $subqueue = nodequeue_load_subqueue($queue->qid);
    nodequeue_subqueue_add($queue, $subqueue, $node->nid);
  }*/
  if ($node->type === 'poll') {
    le_site_create_asset_poll($node);
  }
}

/**
 * Implements hook_node_udpate().
 */
function le_site_node_update($node) {
  if ($node->type == 'poll') {
    le_site_edit_asset_poll($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function le_site_node_delete($node) {
  le_site_delete_asset_poll($node);
}

/**
 * Implements hook_field_formatter_prepare_view().
 * @todo Need investigate reason of this hook.
 */
function geopolis_site_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  if ($field['type'] == 'entity_reference') {
    $target_ids = array();

    // Collect every possible entity attached to any of the entities.
    foreach ($entities as $id => $entity) {
      foreach ($items[$id] as $delta => $item) {
        $target_ids[] = $item['target_id'];
      }
    }

    if ($target_ids) {
      $target_entities = entity_load($field['settings']['target_type'], $target_ids);

      // Iterate through the fieldable entities again to attach the loaded data.
      foreach ($entities as $id => $entity) {
        $rekey = FALSE;

        foreach ($items[$id] as $delta => $item) {
          // Check whether the referenced entity could be loaded.
          if (isset($target_entities[$item['target_id']])) {
            // Replace the instance value with the term data.
            $items[$id][$delta]['entity'] = $target_entities[$item['target_id']];
          }
          // Otherwise, unset the instance value, since the entity does not exist.
          else {
            unset($items[$id][$delta]);
            $rekey = TRUE;
          }
        }

        if ($rekey) {
          // Rekey the items array.
          $items[$id] = array_values($items[$id]);
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function geopolis_site_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  switch ($display['type']) {

    case 'geopolis_site_label_list':
      if (function_exists('entityreference_get_selection_handler')) {
        $handler = entityreference_get_selection_handler($field, $instance);

        foreach ($items as $delta => $item) {
          $label = $handler->getLabel($item['entity']);
          // If the link is to be displayed and the entity has a uri, display a link.
          // Note the assignment ($url = ) here is intended to be an assignment.
          if ($display['settings']['link'] && ($uri = entity_uri($field['settings']['target_type'], $item['entity']))) {
            $result[] = geopolis_site_l($label, $uri['path'], $uri['options']);
          }
          else {
            $result[] = check_plain($label);
          }
        }
      }
      return array(array('#markup' => theme('item_list', array('items' => $result))));

    case 'geopolis_site_image_url':
      $element = array();
      foreach ($items as $delta => $item) {
        if (!empty($display['settings']['image_style'])) {
          $url = image_style_url($display['settings']['image_style'], $item['uri']);
        }
        else {
          $url = file_create_url($item['uri']);
        }
        $element[$delta] = array(
          '#markup' => $url,
        );
      }
      return $element;

    case 'geopolis_site_clear_markup':
      $element = array();
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => strip_tags(assets_cut_filter_process($item['value'])));
      }
      return $element;

    case 'geopolis_site_asset_map':
      $element = array();
      foreach ($items as $delta => $item) {
        $dom = new DomDocument();
        $dom->loadHTML($item['value']);
        $iframe = $dom->getElementsByTagName('iframe');

        if ($iframe->length) {
          $width = $iframe->item(0)->attributes->getNamedItem('width')->nodeValue;
          $height = $iframe->item(0)->attributes->getNamedItem('height')->nodeValue;

          $output = $item['value'];
          $output = preg_replace('/width="' . $width . '"/', 'width="' . $display['settings']['map_width'] . '"', $output);
          $output = preg_replace('/height="' . $height . '"/', 'height="' . $display['settings']['map_height'] . '"', $output);
        }
        $element[$delta] = array('#markup' => $output);
      }
      return $element;
  }
}

/**
 * Implements hook_references_dialog_widgets().
 */
function le_site_references_dialog_widgets() {
  return array(
    'entityreference_autocomplete' => array(
      'operations' => array(
        'delete' => array(
          'function' => 'le_site_references_dialog_entityreference_delete_link',
          'title' => t('Delete link'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function le_site_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => LE_SITE_MODULE_PATH . '/views',
  );
}

/**
 * Implements hook_url_outbound_alter().
 */
function geopolis_site_url_outbound_alter(&$path, &$options) {
  global $base_url;
  if (!empty($options['attributes']) &&
    !empty($options['attributes']['unteflutche'])) {
    if (!empty($options['query'])) {
      if (is_array($options['query'])) {
        $path .= '?' . drupal_http_build_query($options['query']);
      }
      else {
        $path .= '?' . $options['query'];
      }
    }

    $path .= !empty($options['fragment']) ? '#' . $options['fragment'] : '';
    $options['query'] = '';
    $options['fragment'] = '';

    if ((strpos($path, 'http://') !== FALSE) || (strpos($path, 'https://') !== FALSE)) {
      $path = geopolis_site_mask_url($path);
    }
    else {
      $options['external'] = TRUE;
      $path = geopolis_site_mask_url($base_url . '/' . $path);
    }
  }
}

/**
 * Implements hook_js_alter().
 */
function geopolis_site_js_alter(&$js) {
  global $theme;

  if ($js['settings']['scope'] == 'header' && $theme == 'geopolis_admin' && $_GET['render'] !== 'references-dialog') {
    $geopolis_site_admin = drupal_get_path('module', 'geopolis_site') . '/js/geopolis_site_admin.js';

    $js[$geopolis_site_admin] = array(
      'group' => 0,
      'data' => $geopolis_site_admin,
      'scope' => 'header',
      'type' => 'file',
      'defer' => FALSE,
      'cache' => TRUE,
      'preprocess' => TRUE,
      'weight' => 100,
      'every_page' => FALSE,
    );
  }
}

/**
 * Implements hook_filefield_paths_field_type_info().
 */
function geopolis_site_filefield_paths_field_type_info() {
  return array('imagefield_crop');
}

/**
 * Overrides theme_imagecache_external().
 */
function geopolis_site_imagecache_external($variables) {
  if (strpos($variables['path'], 'http://' . $_SERVER['HTTP_HOST']) !== FALSE) {
    $path = str_replace('@domain', $_SERVER['HTTP_HOST'], variable_get('geopolis_site_path_to_files'));
    $variables['path'] = str_replace($path, 'public://', $variables['path']);
    return theme('image_style', $variables);
  }
  if ($variables['path'] = geopolis_site_imagecache_external_generate_path($variables['path'], $variables['style_name'])) {
    return theme('image_style', $variables);
  }
}

/**
 * Fork of function imagecache_external_generate_path().
 */
function geopolis_site_imagecache_external_generate_path($url, $preset) {
  // Create the extenal images directory and ensure it's writable.
  $hash       = md5($url);
  $scheme     = file_default_scheme();
  $directory  = $scheme . '://imagecache/' . $preset . '/externals/' . $hash;

  $real_destination = drupal_realpath($directory);
  if (is_dir($real_destination)) {
    try {
      $file = glob($real_destination . '/*');
      if (!empty($file[0]) && is_string($file[0])) {
        $array = explode('/', $file[0]);
        return $directory . '/' . array_pop($array);
      }
    }
    catch (Exception $exc) {
      watchdog('image_external_derictory', $directory);
    }
  }

  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    $file = geopolis_site_imagecache_external_fetch($url, $directory);
    if ($file) {
      return $file->uri;
    }
  }
  // We couldn't get the file.
  return FALSE;
}

/**
 * Fork of function imagecache_external_fetch().
 */
function geopolis_site_imagecache_external_fetch($url, $cachepath) {
  // Now we test it against the whitelist/blacklist.
  if (!$url) {
    return FALSE;
  }
  // Extract hostname from url.
  $parsed_url = parse_url($url);
  $host = !empty($parsed_url['host']) ? $parsed_url['host'] : '';

  $list = preg_split('/\s+/', variable_get('imagecache_external_hosts', ''));

  // Check if the list is set as a blacklist and the host is in the list or if
  // the list is set as a whitelist and the host is not found in the list.
  // Note that this is retrospective, ie a previously downloaded image can be blocked.
  if (((variable_get('imagecache_external_option', 'white') == 'black' &&
    in_array($host, $list)) ||
    (variable_get('imagecache_external_option', 'white') == 'white' &&
      !in_array($host, $list))) &&
    !user_access('Bypass black/white list')) {
    // If we are unsuccessful then log a message in watchdog.
    watchdog('imagecache_external', 'The image ' . $url . ' could not be retrieved, it did not meet the black/white list requirements.');
    return FALSE;
  }
  if (!user_access('Fetch external images')) {
    watchdog('imagecache_external', 'The image ' . $url . ' could not be retrieved, the user does not have permission to fetch external images.');
    return FALSE;
  }
  $corp_domain = FALSE;

  if (module_exists('chr') && !$corp_domain) {
    $result = curl_http_request($url);
  }
  else {
    $result = drupal_http_request($url);
  }
  $code   = floor($result->code / 100) * 100;
  $types  = array('image/jpeg', 'image/jpg', 'image/png', 'image/gif');
  if (!empty($result->data) && $result->data && $code != 400 && $code != 500 && in_array($result->headers['content-type'], $types)) {
    return file_save_data($result->data, $cachepath, FILE_EXISTS_REPLACE);
  }
  else {
    // If we are unsuccessful then log a message in watchdog.
    watchdog('imagecache_external', 'The image ' . $url . ' could not be retrieved');
    return FALSE;
  }
}

/**
 * Implements hook_menu_block_blocks().
 */
function le_site_menu_block_blocks() {
  // The array key is the block delta used by menu block.
  return array(
    'le_site-menu-1' => array(
      'menu_name'   => 'menu-le-admin-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => '',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 1,
      'expanded'    => 0,
      'sort'        => 0,
    ),
    'le_site-menu-2' => array(
      'menu_name'   => 'menu-le-admin-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => '',
      'level'       => 2,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 0,
      'sort'        => 0,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function le_site_ctools_plugin_api($owner, $api) {
  if ($owner == 'panels') {
    return array('version' => 2.0);
  }
}

/**
 * Implements hook_cron().
 */
function le_site_cron() {
  $statistics_timestamp = variable_get('le_statistics_day_timestamp', '');

  if ((REQUEST_TIME - $statistics_timestamp) >= LE_SITE_NODE_VIEW_COUNTER_RESET_INTEVAL) {
    // Reset day counts.
    db_update('node_counter')
      ->fields(array('mount_count' => 0))
      ->execute();
    variable_set('le_statistics_day_timestamp', REQUEST_TIME);
  }

  // Import blogs.
  /*module_load_include('inc', 'node', 'feeds.pages');
  $nodes = node_load_multiple(array(), array('type' => 'feed'));
  if (!empty($nodes)) {
    foreach ($nodes as $node) {
      feeds_source('feed', $node->nid)->import();
    }
  }*/
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function le_site_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels' || $module == 'page_manager' || $module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Bean view callback.
 */
function geopolis_site_bean_view_multiple($entities, $view_mode = 'default', $langcode = NULL) {
  $output = array();
  foreach ($entities as $bean) {
    $output[] = bean_view($bean, $view_mode, $langcode);
  }
  return array('bean' => $output);
}

/**
 * Implements hook_entity_info_alter().
 */
function le_site_entity_info_alter(&$entity_info) {

  // Add view callback for render bean block throw panel pane as node field entity rendered formatter.
  /*if (!empty($entity_info['bean'])) {
    $entity_info['bean']['view callback'] = 'geopolis_site_bean_view_multiple';
  }*/

  // Node entity alter.
  $build_modes = array(
    'related_articles',
    'video_article',
  );

  foreach ($build_modes as $mode) {
    $entity_info['node']['view modes'][$mode] = array(
      'label' => t(drupal_ucfirst(str_replace('_', ' ', $mode))),
      'custom settings' => TRUE,
    );
  }

  // Asset entity alter.
  $build_modes = array(
    'dashboard_article_thumbnail',
    'related_articles',
    'video_article',
    'in_body',
    /*'taxonomy_evenement',
    'taxonomy_institution',
    'taxonomy_personality',
    'premium_diaporama',
    'diaporama_teaser',
    'choose_video',
    'in_body',
    'block',
    'bloc_mise_en_avant',
    'bloc_de_liste',
    'teaser',
    'search_result',
    'carrousel',*/
  );
  foreach ($build_modes as $mode) {
    $entity_info['asset']['view modes'][$mode] = array(
      'label' => t(drupal_ucfirst(str_replace('_', ' ', $mode))),
      'custom settings' => TRUE,
    );
  }

  // Field collection entity alter.
  /*$build_modes = array(
    'bloc_carrousel',
    'bloc_de_liste',
  );
  foreach ($build_modes as $mode) {
    $entity_info['field_collection_item']['view modes'][$mode] = array(
      'label' => t(drupal_ucfirst(str_replace('_', ' ', $mode))),
      'custom settings' => TRUE,
    );
  }*/

  // User entity alter.
  /*$entity_info['user']['view modes']['full_name'] = array(
    'label' => t('Full name'),
    'custom settings' => TRUE,
  );

  // Taxonomy entity alter.
  $entity_info['taxonomy_term']['view modes']['institution'] = array(
    'label' => t('Institution'),
    'custom settings' => TRUE,
  );
  $entity_info['taxonomy_term']['view modes']['personalities'] = array(
    'label' => t('Personalities'),
    'custom settings' => TRUE,
  );
  $entity_info['taxonomy_term']['view modes']['event'] = array(
    'label' => t('Event'),
    'custom settings' => TRUE,
  );
  $entity_info['taxonomy_term']['view modes']['thematic'] = array(
    'label' => t('Thematic'),
    'custom settings' => TRUE,
  );*/
}

/**
 * Filter callback for embed video markup filter.
 */
function geopolis_site_embed_video_process($text) {
  if (!empty($text)) {
    $text = geopolis_site_media_value($text);
  }
  return $text;
}

/**
 * Implements hook node_view().
 */
function le_site_module_implements_alter(&$implementations, $hook) {
  // Fork pagination node_view to change basic properties of node pagination Class.
  if ($hook == 'node_view' && module_exists('pagination')) {
    if (isset($implementations['pagination'])) {
      unset($implementations['pagination']);
    }
  }
}

/**
 * Implements hook node_view().
 */
function le_site_node_view($node, $view_mode, $langcode) {
  if (module_exists('pagination')) {
    $pg     = Pagination::instance();
    $page   = $pg->getPageVar();
    $paging = $pg->getValue($node->type);
    $style  = $pg->getStyle($node->type);
    $ignore = array_map('trim', explode(',', variable_get('pagination_ignore', '') ) );

    if ($paging && $view_mode == 'full' && $page !== 'show' && !in_array($node->nid, $ignore, TRUE) )    {
      $pg->paginate($node->content['field_body'][0]['#markup'], $paging);
      $node->content['field_body'][0]['#markup'] = $pg->getPage($page);

      if ($style < PAGINATION_TOC)  {
        $node->content['pagination_pager'] = array(
          '#weight' => 50,
          '#markup' => $pg->getPager(),
        );
      }

      if ($style > PAGINATION_DEFAULT && $pg->getPageCount() > 1)  {
        $node->content['pagination_toc'] = array(
          '#weight' => -50,
          '#markup' => $pg->getToc($node->nid),
        );
      }
    }

    if ($paging) {
      $node->content['field_body'][0]['#markup'] = preg_replace($pg->re_custom, '', $node->content['field_body'][0]['#markup']);
    }

    $count    = $pg->getPageCount();
    $showfull = variable_get('pagination_showall', 1);

    if ($paging && $view_mode == 'full' && $showfull && ($count > 1 || $page === 'show') ) {
      $query = ($page !== 'show') ? array('page' => 'show') : array();
      $title = ($page !== 'show') ? t('Show full page') : t('Show paged');
      $class = ($page !== 'show') ? array('pagination-show-full-page') : array('pagination-show-paged');

      $node->content['links']['node']['#links']['pagination-showall'] = array(
        'title'      => $title,
        'href'       => drupal_get_path_alias('node/' . $node->nid),
        'query'      => $query,
        'attributes' => array(
          'title' => $title,
          'class' => $class,
        ),
      );
    }
  }
}

/**
 * Filter callback for embed video markup filter.
 */
function geopolis_site_generate_video_microformat($text) {
  $node = menu_get_object();
  if (!empty($text) && $node) {
    $text = preg_replace_callback('/<object.*>.*<\/object>/s', 'geopolis_site_generate_video_microformat_by_tag', $text);
    $text = preg_replace_callback('/<iframe.*>.*<\/iframe>/s', 'geopolis_site_generate_video_microformat_by_tag', $text);
  }

  return $text;
}

/**
 * Generate microformat for video from tag.
 */
function geopolis_site_generate_video_microformat_by_tag($match) {
  $node = menu_get_object();
  $video_url = geopolis_site_get_url_by_emcode($match[0]);
  $preview = geopolis_site_emvideo_parse($match[0]);
  // If preview is not empty.
  if ($preview) {
    $video = array(
      'url' => $video_url,
      'preview' => $preview,
      'title' => check_plain($node->title),
      'date' => format_date($node->created, 'custom', 'c'),
      'description' => (!empty($description[0]['value']))
      ? check_plain($description[0]['value']) : check_plain($node->title),
    );

    return theme('video_microformat', array('video' => $video, 'emcode' => $match[0]));
  }
  return $match[0];
}


/**
 * Custom Delete term confirm form.
 */
function le_site_additions_taxonomy_term_confirm_delete($form, &$form_state, $tid) {
  $term = taxonomy_term_load($tid);

  // Always provide entity id in the same form key as in the entity edit form.
  $form['tid'] = array('#type' => 'value', '#value' => $tid);

  $form['#term'] = $term;
  $form['type'] = array('#type' => 'value', '#value' => 'term');
  $form['name'] = array('#type' => 'value', '#value' => $term->name);
  $form['vocabulary_machine_name'] = array('#type' => 'value', '#value' => $term->vocabulary_machine_name);
  $form['delete'] = array('#type' => 'value', '#value' => TRUE);
  return confirm_form($form,
    t('Are you sure you want to delete the term %title?',
      array('%title' => $term->name)),
    'admin/dashboard/tags',
    t('Deleting a term will delete all its children if there are any. This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Delete confirm form submit handler.
 */
function le_site_additions_taxonomy_term_confirm_delete_submit($form, &$form_state) {
  taxonomy_term_delete($form_state['values']['tid']);
  $vocabulary = taxonomy_vocabulary_load($form['#term']->vid);
  taxonomy_check_vocabulary_hierarchy($vocabulary, $form_state['values']);
  drupal_set_message(t('Deleted term %name.', array('%name' => $form_state['values']['name'])));
  watchdog('taxonomy', 'Deleted term %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);
  $form_state['redirect'] = 'admin/dashboard/tags';
  cache_clear_all();
  return;
}

/**
 * Fork twitter_pull_add_links function of twitter pull module.
 */
function geopolis_site_twitter_pull_add_links($text) {
  $pattern = '#(https?)://([^\s\(\)\,]+)#ims';
  $repl = '<a href="$1://$2" rel="nofollow" title="$1://$2">$2</a>';
  $text = preg_replace($pattern, $repl, $text);

  $pattern = '#@(\w+)#ims';
  $repl = '<a href="http://twitter.com/$1" rel="nofollow" title="@$1">@$1</a>';
  $text = preg_replace($pattern, $repl, $text);

  $pattern = '/[#]+([A-Za-z0-9-_]+)/';
  $repl = '<a href="http://twitter.com/#!/search?q=%23$1" title="#$1" rel="nofollow">#$1</a>';
  $text = preg_replace($pattern, $repl, $text);

  $text = filter_xss($text);
  return geopolis_site_replace_external_link_filter($text);
}

/**
 * Implements hook_page_build().
 */
function geopolis_site_page_build(&$page) {

  if (user_access('access dashboard homepage')) {
    $page['page_bottom']['admin_dashboard_link'] = array(
      '#type' => 'markup',
      '#markup' => theme('admin_dashboard_link'),
    );
  }
}

/**
 * Check if current request is AJAX.
 */
function le_site_is_ajax() {
  return isset($_SERVER['HTTP_X_REQUESTED_WITH'])
    && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
}

/**
 * Implements hook_block_view_alter().
 */
function geopolis_site_block_view_alter(&$data, $block) {
  // Remove disqus comments.
  if (variable_get('geopolis_site_disqus_disabled', FALSE)) {
    if ($block && ($block->module == 'disqus') && ($block->delta == 'disqus_comments')) {
      if (!empty($data['content']['disqus'])) {
        unset($data['content']['disqus']);
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function geopolis_site_node_access($node, $op, $account) {
  $j = user_role_load_by_name('Journaliste');
  $je = user_role_load_by_name('Journaliste Éditeur');
  $rids = array($j->rid => $j->rid, $je->rid => $je->rid);
  if (array_intersect_key($account->roles, $rids)) {
    return NODE_ACCESS_ALLOW;
  }
}

/**
 * Implements hook_page_alter().
 */
function le_site_page_alter(&$page) {

  $app_id = variable_get('le_facebook_app_id', '372858999446772');
  $code = <<<HTML
  <div id="fb-root"></div>
  <script>(function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/fr_FR/all.js#xfbml=1&appId=$app_id";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));</script>
HTML;
  $page['page_bottom']['fb'] = array('#type' => 'markup', '#markup' => $code);

  $code = <<<HTML
    <script>
      !function(d,s,id){
        var js,fjs=d.getElementsByTagName(s)[0];
        if(!d.getElementById(id)){
          js=d.createElement(s);
          js.id=id;js.src="//platform.twitter.com/widgets.js";
          fjs.parentNode.insertBefore(js,fjs);
        }
      }(document,"script","twitter-wjs");
    </script>
HTML;

  $page['page_bottom']['tweeter'] = array('#type' => 'markup', '#markup' => $code);

  $code = <<<HTML
    <!-- Place this tag after the last +1 button tag. -->
    <script type="text/javascript">
      window.___gcfg = {lang: 'fr'};

      (function() {
        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
        po.src = 'https://apis.google.com/js/plusone.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
      })();
    </script>
HTML;

  $page['page_bottom']['gplus'] = array('#type' => 'markup', '#markup' => $code);
}

/**
 * Implements hook_token_info().
 */
function geopolis_site_token_info() {
  $info['tokens']['file']['geopolis-filtered-file-name'] = array(
    'name' => t("Geopolis filtered file name"),
    'description' => t("Geopolis filtered file name."),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function geopolis_site_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();

  if ($type == 'file' && !empty($data['file'])) {
    $file = $data['file'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'geopolis-filtered-file-name':
          $info = pathinfo($file->filename);
          $replacements[$original] = geopolis_site_file_pathauto_cleanstring($info['filename']);
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_ckeditor_plugin().
 */
function le_site_ckeditor_plugin() {
  $path = LE_SITE_MODULE_PATH . '/ckeditor/plugins';
  $plugins = array();
  $plugin_names = array(
    'le_pagebreak',
  );

  foreach ($plugin_names as $name) {
    $plugins[$name] = array(
      'name' => $name,
      'desc' => t('Plugin file: ' . $name),
      'path' => $path . "/$name/",
      'buttons' => array(
        $name => array(
          'icon' => '/images/icon.png',
          'label' => t($name),
        ),
      ),
    );
  }

  return $plugins;
}
