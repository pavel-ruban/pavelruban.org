<?php
/**
 * @file
 * Pavel Ruban site main module.
 */

define('PR_MODULE_PATH', drupal_get_path('module', 'pavelruban'));
define('SHADOWBOX_DEFAULT_PATH', 'sites/all/libraries/shadowbox');
define('WOW_SLIDER_DEFAULT_PATH', 'sites/all/libraries/wowslider');

require_once PR_MODULE_PATH . '/pavelruban.form.inc';
require_once PR_MODULE_PATH . '/pavelruban.text.inc';
require_once PR_MODULE_PATH . '/pavelruban.context.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function pavelruban_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels' || $module == 'page_manager' || $module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Is ajax check.
 */
function pavelruban_is_ajax() {
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])
    && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function pavelruban_ctools_plugin_api($owner, $api) {
  if ($owner == 'panels') {
    return array('version' => 2.0);
  }
}

/**
 * Update storage.
 */
function pavelruban_comment_delete($comment) {
  $storage = variable_get('pavelruban_last_comments', array());
  unset($storage[$comment->cid]);
  variable_set('pavelruban_last_comments', $storage);
}

/**
 * Save new comments.
 */
function pavelruban_comment_insert($comment) {
  $storage = variable_get('pavelruban_last_comments', array());
  if (date('Y', time()) != ($year = date('Y', $comment->changed)))  {
    $date = $year;
  }
  else {
    setlocale(LC_ALL, 'ru_RU.UTF8');
    $date = strftime('%d %b в %H:%M', $comment->changed);
  }
  $storage[$comment->cid] = array(
    'nid' => $comment->nid,
    'uid' => empty($comment->is_anonymous) ? $comment->uid : 0,
    'user_name' => empty($comment->is_anonymous) ? $comment->name : t('Аноним'),
    'text' => $comment->comment_body['und'][0]['value'],
    'timestamp' => $comment->changed,
    'date' => $date,
    'cid' => $comment->cid,
    'accessed_uids' => array(),
  );
  variable_set('pavelruban_last_comments', $storage);
}

/**
 * Retrieve comment list.
 */
function pavelruban_get_last_comments() {
  global $user;

  static $comments = array();
  if (empty($comments[$user->uid])) {
    $comments_storage = variable_get('pavelruban_last_comments', array());
    if (!empty($comments_storage)) {
      foreach ($comments_storage as $key => &$comment) {
        if (($user->uid != $comment['uid'] || empty($user->uid)) && array_search($user->uid, $comment['accessed_uids']) === FALSE) {
          $comments[$user->uid][] = $comment;
        }
        if ((time() -$comment['timestamp']) > 60 * 60 * 24 * 7) {
          unset($comments_storage[$key]);
        }
      }
      variable_set('pavelruban_last_comments', $comments_storage);
    }
  }
  return !empty($comments[$user->uid]) ? $comments[$user->uid] : array();
}

/**
 * Implements hook_filter_info().
 */
function pavelruban_filter_info() {
  $filters['text_node_wrapper'] = array(
    'title' => t('The textNode following last asset wrapper'),
    'description' => t('Wrapp with display block span the text nodes following last small asset to provide clear css rule work'),
    'process callback' => 'pavelruban_text_following_last_asset_wrapper',
  );
  return $filters;
}

/**
 * Implements hook_entity_info_alter().
 */
function pavelruban_entity_info_alter(&$entity_info) {
  $view_modes = array(
    'asset' => array(
      'teaser',
      'small_right',
      'tooltip',
      'slider_thumbnail',
      'slider_viewport',
    ),
    'user' => array(
      'comments',
      'like_mini',
      'like_full',
    ),
  );

  foreach ($view_modes as $key => $entity_type) {
    foreach ($entity_type as $mode) {
      $entity_info[$key]['view modes'][$mode] = array(
        'label' => t(drupal_ucfirst(str_replace('_', ' ', $mode))),
        'custom settings' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_library().
 */
function pavelruban_library() {

  $shadowbox_location = variable_get('shadowbox_location', SHADOWBOX_DEFAULT_PATH);
  $wow_slider_location = variable_get('wow_slider_location', WOW_SLIDER_DEFAULT_PATH);

  $libraries['shadowbox'] = array(
    'title' => 'Shadowbox',
    'website' => 'http://www.shadowbox-js.com/',
    'version' => '3.0.3',
    'js' => array(
      $shadowbox_location . '/shadowbox.js' => array(),
      // Make sure to set the shadowbox path so that the language is set properly.
      array(
        'type' => 'inline',
        'scope' => 'header',
        'group' => JS_THEME,
        'data' => '
          Shadowbox.path = "' . base_path() . $shadowbox_location . '/";
        ',
      ),
    ),
    'css' => array(
      $shadowbox_location . '/shadowbox.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      array(
        'type' => 'inline',
        'media' => 'print',
        'data' => '
          #sb-container { position: relative; }
          #sb-overlay { display: none; }
          #sb-wrapper { position: relative; top: 0; left: 0; }
          #sb-loading { display: none; }
        ',
      ),
    ),
  );

  $libraries['wow_slider'] = array(
    'title' => 'Wow slider',
    'website' => 'http://wowslider.com',
    'version' => '1',
    'js' => array(
      $wow_slider_location . '/wowslider.js' => array(),
      $wow_slider_location . '/wowsliderinit.js' => array(),
    ),
    'css' => array(
      $wow_slider_location . '/wowslider.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $libraries;
}

/**
 * Comment delete callback.
 */
function pavelruban_ajax_comment_delete($cid) {
  global $user;

  if ($user->uid == 1) {
    comment_delete($cid);
    $response = array('status' => 'success');
  }
  else {
    $comment = comment_load($cid);
    $time = time() - $comment->changed;
    if ($comment->uid == $user->uid
      && $time < 300) {
      comment_delete($cid);
      $response = array('status' => 'success');
    }
    else {
      $response = array('status' => 'denided');
    }
  }
  drupal_json_output($response);
  drupal_exit();
}

/**
 * Implement hook_menu().
 */
function pavelruban_menu() {
  $items['ajax/comment/%/delete'] = array(
    'page callback' => 'pavelruban_ajax_comment_delete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  $items['ajax/vote/node/%'] = array(
    'page callback' => 'pavelruban_ajax_node_vote',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );

  $items['ajax/vote/node/%/delete'] = array(
    'page callback' => 'pavelruban_ajax_node_dislike',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );

  $items['ajax/full-voted-user-statistic/%'] = array(
    'page callback' => 'pavelruban_ajax_full_voted_user_statistic',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Vote node functional.
 */
function pavelruban_ajax_full_voted_user_statistic($nid) {
  $node_votes = votingapi_select_votes(
    array(
      'entity_id' => $nid,
      'entity_type' => 'node',
    )
  );

  $response = array('peoplePopup' => theme('like_popup', array('meta' => $node_votes, 'mode' => 'full', 'nid' => $nid)));

  drupal_json_output($response);
  drupal_exit();
}

/**
 * Vote node functional.
 */
function pavelruban_ajax_node_vote($nid) {
  if (!empty($nid)) {
    global $user;
    $vote = array(
      'value' => 1,
      'value_type' => 'points',
      'entity_id' => $nid,
      'uid' => $user->uid,
    );

    $criteria = array(
      'uid' => $user->uid,
      'entity_id' => $nid,
      'value_type' => 'points',
    );
    if (!$user->uid) {
      $criteria += array(
        'vote_source' => ip_address(),
      );
    }
    $votes[] = $vote;
    $criterias[] = $criteria;

    votingapi_set_votes($votes, $criterias);
    $response = array('vote' => 1);

    $node_votes = votingapi_select_votes(
      array(
        'entity_id' => $nid,
        'entity_type' => 'node',
      )
    );
  }
  $response += array('likesCount' => count($node_votes));
  $response += array('likedUsers' => theme('like_popup', array('meta' => $node_votes, 'nid' => $nid)));
  $response += array('userLikesCount' => pavelruban_current_like_count());

  drupal_json_output($response);
  drupal_exit();
}

/**
 * Dislike node functional.
 */
function pavelruban_ajax_node_dislike($nid) {
  if (!empty($nid)) {
    global $user;
    $criteria = array(
      'uid' => $user->uid,
      'entity_id' => $nid,
      'value_type' => 'points',
    );
    if (!$user->uid) {
      $criteria += array(
        'vote_source' => ip_address(),
      );
    }
    votingapi_delete_votes(votingapi_select_votes($criteria));
    $response = array('vote' => 0);

    $node_votes = votingapi_select_votes(
      array(
        'entity_id' => $nid,
        'entity_type' => 'node',
      )
    );
  }
  $response += array('likesCount' => count($node_votes));
  $response += array('likedUsers' => theme('like_popup', array('meta' => $node_votes, 'nid' => $nid)));
  $response += array('userLikesCount' => pavelruban_current_like_count());

  drupal_json_output($response);
  drupal_exit();
}

/*
 * Implement hook_custom_theme().
 */
function pavelruban_custom_theme() {
  $arg = arg(0);
  $arg2 = arg(2);
  if ($arg == 'user' && $arg2 == 'edit') {
    return 'front';
  }
}

/**
 * Implements hook_theme.
 */
function pavelruban_theme() {
  $items = array();
  $items['tags'] = array(
    'file' => 'theme.inc',
    'path' => PR_MODULE_PATH . '/theme',
    'template' => 'tags',
  );

  $items['social'] = array(
    'file' => 'theme.inc',
    'path' => PR_MODULE_PATH . '/theme',
    'template' => 'social',
  );

  $items['like_popup'] = array(
    'file' => 'theme.inc',
    'path' => PR_MODULE_PATH . '/theme',
    'template' => 'like-popup',
  );
  return $items;
}
